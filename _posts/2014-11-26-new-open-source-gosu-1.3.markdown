---
layout: post
title: New Open Source Gosu 1.3
author: Gosu Team
---

The Gosu team is happy to announce the official release of Gosu 1.3 and Gosu Plugin 3.7 for IntelliJ 12.

Changes in this release
-----------------------

- Several bytecode/compiler performance improvements, for example
    - make string concatenation fast, no longer calls into the runtime.
    - optimize generated bytecode for expressions.
    - rewrite Block/Function-to-Interface coercion to be compiled statically. 
    - support java generic signature bytecode in gosu compiled class file.
- Progress on the Gosu specification and relative test coverage.
- Support loading Gosu classes/types by source in *multiple* ClassLoaders i.e. ,
  the entire chain. With this change Gosu classes are guaranteed to load in the
  same ClassLoader as Java classes declared alongside them. 
- Removing the old `<>` operator, you must use `!=` instead.
- Primitive types are now reserved keywords. 

      function double() {} // It won't compile

- Variables declared in the using statement are implicitly final

      using(var d = new Disposable())
      {
        d = null // It's now Illegal
      }
    
- Remove wildcards. Gosu allowed you to use Java-like wildcards but it never
  supported them at the semantic level as, anyway, type parameters are covariant 
  in Gosu. Wildacards were just syntactic sugar as shown by the following 
  transformations:
    - from `List<?>` to `List<Object>>`
    - from `List<? extends T>` to `List<T>>`
    - from `List<? super T>` to `List<UpperBound(T)>`


The plugin is available from the JetBrains repository, which is directly accessible from your IntelliJ 12 plugins setup dialog. Select "Gosu", right click and install (see [this](http://gosu-lang.github.io/downloads.html) page more detailed instructions). 
 
